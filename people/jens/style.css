:root {
    --hexagonSize: calc(var(--scaling) * 2)
}

.shimmer div.jens {
    background-image: url('https://gangdev.co/shared/files/img/jens/icon.webp');
    border: calc(var(--scaling) * 0.2) solid gray;
}

.arrow {
    font-size: calc(var(--scaling) * 0.85);
    height: calc(var(--scaling) * 0.2);
    font-weight: bold;
}

/* About Me Section (also known as overview */
.sect.cont#overview {
    justify-content: flex-start;
}
.sect.cont#overview h2 {
    font-size: calc(var(--scaling) * 3);
    margin-bottom: calc(var(--scaling) * 5);
}
.timeline {
    width: 100%;
    position: absolute;
    padding: calc(var(--scaling) * 1);
    margin-top: calc(var(--scaling) * 4);
    display: flex;
    justify-content: center;
    pointer-events: auto;
    cursor: default;
}
.timeline::before {
    content: "";
    position: absolute;
    top: calc(var(--scaling) * 2);
    left: 5%;
    right: 5%;
    height: calc(var(--scaling) * 0.3);
    border-radius: calc(var(--scaling) * 0.1);
    transform: translateY(-50%);
    background: white;
    z-index: 0;
}
.timelineItem {
    position: relative;
    width: calc(var(--scaling) * 10);
    margin: 0 calc(var(--scaling) * 0.5);
    padding: calc(var(--scaling) * 0.15) calc(var(--scaling) * 0.3) calc(var(--scaling) * 0.3) calc(var(--scaling) * 0.3);
    text-align: center;
    background: #f9f9f9;
    border-radius: calc(var(--scaling) * 0.2);
    transition: max-height 0.3s ease;
    max-height: calc(var(--scaling) * 2);
    overflow: hidden;
    z-index: 1;
}
.timelineItem:hover {
    max-height: 70vh;
}
.timelineBox {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    color: black;
}
.timelineBox h3 {
    font-size: calc(var(--scaling) * 1);
    height: calc(var(--scaling) * 1);
}
.timelineBox p {
    font-size: calc(var(--scaling) * 0.5);
}
.timelineDetails {
    opacity: 0;
    transition: opacity 0.3s ease;
    color: dimgray;
    font-size: calc(var(--scaling) * 0.5);
}
.timelineDetails ul {
    font-style: italic;
    text-align: left;
    padding-left: calc(var(--scaling) * 1);
}
.timelineItem:hover {
    max-height: calc(var(--scaling) * 15);
}
.timelineItem:hover .timelineDetails {
    opacity: 1;
}

/* Expertise Section */
.sect.cont#expertise h2 {
    font-size: calc(var(--scaling) * 2.5);
    height: calc(var(--scaling) * 2.8);
}
.sect.cont#expertise p.desc {
    font-size: calc(var(--scaling) * 1.2);
    margin-bottom: calc(var(--scaling) * 1.2);
}
.expSect {
    /* Each hex’s nominal width and height */
    --hexWidth: calc(var(--scaling) * 4);
    --hexHeight: calc(var(--hexWidth) * 0.866);

    /* We’ll use grid, but control offsets via row calculations */
    display: grid;
    /* Enough columns to fill the width with hexes */
    grid-template-columns: repeat(auto-fill, minmax(var(--hexWidth), 1fr));
    /* Each row is just tall enough for one hex, plus a bit for offset nesting */
    grid-auto-rows: calc(var(--hexHeight));
    gap: 0; /* We'll manually space them for a tight honeycomb */

    justify-content: center;
    width: 90%;
    margin: 0 auto;
}

/* Base hexagon styling */
.hexagon {
    width: var(--hexWidth);
    height: var(--hexHeight);
    background-color: #ECEFF1; /* Light color for contrast */
    clip-path: polygon(
            25% 0%, 75% 0%,
            100% 50%, 75% 100%,
            25% 100%, 0% 50%
    );
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0; /* We'll offset with transforms below */
}

/* Text inside the hex */
.hexagon p {
    color: #333;
    text-align: center;
    font-size: calc(var(--scaling) * 0.5);
    margin: 0;
}

/*
  Create the “interlock” by offsetting every OTHER row horizontally and vertically.
  We can detect even rows with this pattern:
  - nth-child(2n) is every even item, but we want “every item in an even row.”
  - So we rely on the grid placing items left-to-right, top-to-bottom.
  This approach approximates a rectangular bounding box while allowing infinite rows.
*/

/* Slight vertical bump for the even row to nest between the odd row’s hexes */
.expSect > .hexagon:nth-child(even) {
    transform: translateY(calc(var(--hexHeight) * 0.5));
}

/*
  If you want them even closer horizontally,
  you can shift the even row to the left or right. For instance:
  transform: translateY(...) translateX(...);
  But that typically moves the bounding box edges.
*/

.vivienne {
    opacity: 0;
    position: absolute;
    white-space: nowrap;
    transform: translateX(-50%);
    transition: opacity 0.3s ease, transform 0.3s ease;
    font-size: inherit;
    color: pink;
    text-decoration: none;
}
.title:hover .vivienne {
    opacity: 1;
    transform: translateX(0);
}